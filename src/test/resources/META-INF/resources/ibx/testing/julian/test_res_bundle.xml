<?xml version="1.0" encoding="UTF-8"?>
<ibx-res-bundle name="test_res_bundle.xml" loadContext="bundle">
	<strings>
		<string-file src="./test_res_strings.txt" default="false"/>
		<string-bundle>
			<![CDATA[
			{
				"language":"ibx_default",
				"strings":
				{
				}
			}
		]]>
		</string-bundle>
	</strings>

	<styles>
		<style-file src="./test_res_styles.css"/>
		<style-sheet>
		<![CDATA[
			.ibx-prop-tree
			{
				width:25%;
				xborder:1px solid red;
			}
			.ibx-prop-values
			{
				flex:1 1 auto;
				xborder:1px solid lime;
			}
			.ibx-prop-splitter
			{
				min-width:1px;
				width:1px;
				background-color:#ccc;
				border:none;
			}
			.ibx-prop-tree-node .tnode-label
			{
				border-bottom:1px solid #ccc;
			}
		]]>
		</style-sheet>
	</styles>

	<markup>
		<markup-file src="./test_res_markup.xml"/>
		<markup-block>
		</markup-block>
	</markup>

	<scripts>
		<script-file src="./test_res_script.js"/>
		<script-file src="../../ibxtools/shared_resources/js/ibfs.js" loadContext="ibx"/>
		<script-block>
		<![CDATA[
			var testProps = 
			{
				"border":
				{
					"displayName":"Border",
					"displayValue":"1px solid black",
					"value":"1px solid black",
					"type":"string",
					"uiType":"borderSelector",
					"props":
					{
						"left":
						{
							"displayName":"Left",
							"displayValue":"1px solid black",
							"value":"1px solid black",
							"type":"string",
							"uiType":"borderSelector",
							"props":
							{
								"width":
								{
									"displayName":"Width",
									"displayValue":"1px",
									"value":"1px",
									"type":"string",
									"uiType":"textField",
								},
								"style":
								{
									"displayName":"Style",
									"displayValue":"1px",
									"value":"1px",
									"type":"string",
									"uiType":"select",
									"values":
									{
										"solid":
										{
											"displayName":"Solid",
											"value":"solid",
										},
										"dashed":
										{
											"displayName":"Dashed",
											"value":"dashed",
										},
										"dotted":
										{
											"displayName":"Dotted",
											"value":"dotted",
										},
									},
								},
								"color":
								{
									"displayName":"Color",
									"displayValue":"red",
									"value":"red",
									"type":"color",
									"uiType":"colorPicker",
								},
							}
						}
					}
				}
			};

			$.widget("ibi.ibxPropertySheet", $.ibi.ibxHBox, 
			{
				options:
				{
					align:"stretch",
				},
				_widgetClass:"ibx-property-sheet",
				_create:function()
				{
					this._super();
					var tree = this._propTree = $("<div class='ibx-prop-tree'>").ibxTree();
					var splitter = this._splitter = $("<div class='ibx-prop-splitter'>").ibxSplitter();
					var vals = this._propVals = $("<div class='ibx-prop-values'>").ibxHBox();
					this.element.append(tree, splitter, vals);
				},
				_init:function()
				{
					this._super();
				},
				_destroy:function()
				{
					this._super();
				},
				props:function(props)
				{
					this._props = props;
					this._propTree.ibxWidget("remove");
					this._propVals.ibxWidget("remove");
					this._buildTree(props, this._propTree);
				},
				_buildTree:function(prop, parent)
				{
					for(var key in prop)
					{
						var item = prop[key];
						var treeItem = $("<div class='ibx-prop-tree-node'>").ibxTreeNode({container:!!item.props, labelOptions:{text:item.displayName}});
						treeItem.data("ibxPropInfo", "prop");
						parent.ibxWidget("add", treeItem);
						if(item.props)
						{
							this._buildTree(item.props, treeItem)
						}
					}
				},
				_refresh:function()
				{
					var options = this.options;
					this._super();
				}
			});
			//# sourceURL=test_res_bundle.xml
		]]>
		</script-block>
	</scripts>
</ibx-res-bundle>