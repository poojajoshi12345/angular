<?xml version="1.0" encoding="UTF-8"?>
<ibx-res-bundle name="test_res_bundle.xml" loadContext="bundle">
	<strings>
		<string-file src="./test_res_strings.txt" default="false"/>
		<string-bundle>
			<![CDATA[
			{
				"language":"ibx_default",
				"strings":
				{
				}
			}
		]]>
		</string-bundle>
	</strings>

	<styles>
		<style-file src="./test_res_styles.css"/>
		<style-sheet>
		<![CDATA[
			.ibx-data-grid
			{
				box-sizing:border-box;
			}
			.dgrid-header-col-bar, .dgrid-header-row-bar
			{
				background-color:#eee;
				overflow:hidden;
			}
			.ibx-data-grid > .dgrid-header-bar-hidden
			{
				display:none;
			}
			.dgrid-header-col, .dgrid-header-row
			{
				flex:1 0 auto;
				padding: .5em;
				box-sizing:border-box;
			}
			.dgrid-header-col-splitter
			{
				min-width:0px;
				width:5px;
				background-color:transparent;
				border-right:1px solid #ccc;
				box-sizing:border-box;
			}
			.dgrid-grid
			{
				border-top:1px solid black;
				overflow:auto;
			}
			.dgrid-row
			{
				flex:0 0 auto;
			}
			.dgrid-cell
			{
				height:1em;
				flex:0 0 auto;
				padding:.5em;
				border-right:1px solid #ccc;
				border-bottom:1px solid #ccc;
			}
			.dgrid-cell-auto-create
			{
			}
		]]>
		</style-sheet>
	</styles>

	<markup>
		<markup-file src="./test_res_markup.xml"/>
		<markup-block>
		</markup-block>
	</markup>

	<scripts>
		<script-file src="./test_res_script.js"/>
		<script-file src="../../ibxtools/shared_resources/js/ibfs.js" loadContext="ibx"/>
		<script-block>
		<![CDATA[
			var testProps = 
			[
				{
					"displayName":"Background Color",
					"displayValue":"White",
					"name":"backgroundColor",
					"value":"white",
					"type":"string",
					"uiType":"colorPicker",
					"expanded":false,
				},
				{
					"displayName":"Border",
					"displayValue":"1px solid black",
					"name":"border",
					"value":"1px solid black",
					"type":"string",
					"uiType":"borderSelector",
					"expanded":false,
					"props":
					[
						{
							"displayName":"Left",
							"displayValue":"1px solid black",
							"name":"left",
							"value":"1px solid black",
							"type":"string",
							"uiType":"borderSelector",
							"expanded":false,
							"props":
							[
								{
									"displayName":"Width",
									"displayValue":"1px",
									"name":"width",
									"value":"1px",
									"type":"string",
									"uiType":"textField",
								},
								{
									"displayName":"Style",
									"displayValue":"Solid",
									"name":"style",
									"value":"solid",
									"type":"string",
									"uiType":"select",
									"values":
									{
										"solid":
										{
											"displayName":"Solid",
											"value":"solid",
										},
										"dashed":
										{
											"displayName":"Dashed",
											"value":"dashed",
										},
										"dotted":
										{
											"displayName":"Dotted",
											"value":"dotted",
										},
									},
								},
								{
									"displayName":"Color",
									"displayValue":"red",
									"name":"color",
									"value":"red",
									"type":"color",
									"uiType":"colorPicker",
								},
							]
						}
					]
				}
			];

			$.widget("ibi.ibxDataGrid", $.ibi.ibxGrid,
			{
				options:
				{
					colMap:[],
					defaultColConfig: {title:"Column", size:"100px", "justify":"center", resizable:false},
					showColHeaders:true,
					showRowHeaders:false,
					
					/*frame stuff*/
					cols:"auto 1fr",
					rows:"auto 1fr",
					classes:
					{
						colHeaderBarClass:"dgrid-header-col-bar",
						colHeaderClass:"dgrid-header-col",
						colHeaderSplitterClass:"dgrid-header-col-splitter",
						rowHeaderBarClass:"dgrid-header-row-bar",
						rowHeaderClass:"dgrid-header-row",
						rowHeaderSplitterClass:"dgrid-header-row-splitter",
						gridClass:"dgrid-grid",
						gridRow:"dgrid-row",
						cellClass:"dgrid-cell",
					},
					gridOptions:
					{
						align:"stretch",
						justify:"start",
					}
				},
				_widgetClass:"ibx-data-grid",
				_create:function()
				{
					var options = this.options;
					var classes = options.classes;
					var colHeaderBar = this._colHeaderBar = $("<div>").ibxHBox().ibxAddClass(classes.colHeaderBarClass).data({ibxCol:"2/span1", ibxRow:"1"});
					var rowHeaderBar = this._rowHeaderBar = $("<div>").ibxVBox().ibxAddClass(classes.rowHeaderBarClass).data({ibxCol:"1/span1", ibxRow:"2"});
					var grid = this._grid = $("<div>").ibxVBox({align:"stretch"}).ibxAddClass(classes.gridClass).data({ibxCol:"2", ibxRow:"2"});
					this.add([colHeaderBar[0], rowHeaderBar[0], grid[0]]);
					this._super();
				},
				_buildHeaders:function()
				{
					var options = this.options;
					var classes = options.classes;

					this._colHeaderBar.ibxWidget("remove");
					var colMap = options.colMap;
					for(var i = 0; i < colMap.length; ++i)
					{
						var cInfo = colMap[i] = $.extend({}, options.defaultColConfig, colMap[i]);
						var size = (cInfo.size == "*") ? "flex:1 1 auto" : "width:"+cInfo.size;

						//make header
						var cHeading = $(sformat("<div class='{1}' style='{2};'>{3}</div>", classes.colHeaderClass, size, cInfo.title))
						cHeading.ibxButtonSimple({justify:cInfo.justify || "start"});
						
						//make splitter
						var splitter = $(sformat("<div class='{1}'>", classes.colHeaderSplitterClass));
						splitter.ibxSplitter({locked:!cInfo.resizable || (i == colMap.length-1), resize:"first"}).on("ibx_resize", this._onSplitterResize.bind(this));

						//add header to bar
						this._colHeaderBar.ibxWidget("add", [cHeading[0], splitter[0]]);
					}
				},
				getCell:function(idxRow, idxCol)
				{
					var ret = null;
					var row = this.getRow(idxRow);
					var filter = (Number.isInteger(idxCol)) ? sformat(".dgrid-cell:nth-child({1})", idxCol+1) : idxCol;
					return $(row).children(filter)[0] || null;
				},
				getRow:function(idxRow)
				{
					var filter = (Number.isInteger(idxRow)) ? sformat(".dgrid-row:nth-child({1})", idxRow+1) : idxRow;
					return this._grid.children(filter)[0] || null;
				},
				addRow:function(cells, sibling, before, refresh)
				{
					var options = this.options;
					var row = $("<div>").ibxHBox().ibxAddClass(options.classes.gridRow);

					//create extra columns less than cells.
					while(cells.length > options.colMap.length)
						options.colMap.push($.extend({}, options.defaultColConfig));

					//create extra cells less that columns.
					while(cells.length < options.colMap.length)
						cells.push($("<div class='dgrid-cell-auto-create'>")[0]);

					row.append(cells);
					this._grid.append(row);
					$(cells).ibxAddClass("dgrid-cell").data("ibxGridRow", row[0]);

					if(refresh)
						this.refresh();
					return row[0];
				},
				addRows:function(rows, sibling, before, refresh)
				{
					var ret = [];
					for(var i = 0; i < rows.length; ++i)
						ret.push(this.addRow(rows[i], sibling, before, refresh));
					return ret;
				},
				removeRow:function(row, destroy, refresh)
				{
					this._grid.ibxWidget("remove", row, destroy, refresh);
				},
				removeAll:function()
				{
					this._grid.ibxWidget("remove");
				},
				_onSplitterResize:function(e, resizeInfo)
				{
					var splitter = $(e.target);
					var sWidth = splitter.outerWidth();
					var e1lWidth = resizeInfo.el1.outerWidth();
					var colMap = this.options.colMap;

					var idxEl = splitter.siblings(".dgrid-header-col").index(resizeInfo.el1);
					var cells = this._grid.find(sformat(".dgrid-row > .dgrid-cell:nth-child({1})", idxEl+1));
					cells.outerWidth(e1lWidth + sWidth);
				},
				_setOption:function(key, value)
				{
					var options = this.options;
					if(key == "colMap")
					{
						//make sure passed configs have all missing values with defaults.
						 $.each(value, function(idx, colConfig)
						 {
						 	var config = $.extend({}, options.defaultColConfig, colConfig);
						 	$.extend(colConfig, config);
						 }.bind(this));
					}
					if(key == "defaultColConfig")
						value = $.extend({}, options.defaultColConfig, value);
					this._super(key, value);
				},
				_refresh:function()
				{
					var options = this.options;
					this._colHeaderBar.ibxToggleClass("dgrid-header-bar-hidden", !options.showColHeaders);
					this._rowHeaderBar.ibxToggleClass("dgrid-header-bar-hidden", !options.showRowHeaders);
					this._super();

					//update the header bars regardless of visibility, as they control the grid cell sizes.
					this._buildHeaders();

					//update column widths
					if(options.colMap.length)
					{
						var splitterSize = $(this._colHeaderBar[0].querySelector(".dgrid-header-col-splitter")).outerWidth();
						var colMap = options.colMap;
						for(var i = 0; i < colMap.length; ++i)
						{
							var cells = this._grid.find(sformat(".dgrid-row > .dgrid-cell:nth-child({1})", i+1));
							var cellSize = parseInt((colMap[i]._curSize || colMap[i].size), 10);
							(colMap[i].size == "*") ? cells.css({"flex":"1 1 auto", "width":"1px"}) : cells.outerWidth(cellSize + splitterSize);
						}
					}
				}
			});

					
			//# sourceURL=test_res_bundle.xml
		]]>
		</script-block>
	</scripts>
</ibx-res-bundle>