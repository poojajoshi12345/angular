<?xml version="1.0" encoding="UTF-8"?>
<ibx-res-bundle name="test_res_bundle.xml" loadContext="bundle">
	<strings>
		<string-file src="./test_res_strings.txt" default="false"/>
		<string-bundle>
			<![CDATA[
			{
				"language":"ibx_default",
				"strings":
				{
				}
			}
		]]>
		</string-bundle>
	</strings>

	<styles>
		<style-file src="./test_res_styles.css"/>
		<style-sheet>
		<![CDATA[
			.ibx-prop-heading
			{
				background-color:#ccc;
			}
			.ibx-prop-heading-label
			{
				padding:3px;
				border:1px outset;
			}
			.ibx-prop-row
			{
				border-bottom:1px solid #eee;
			}
			.ibx-prop-heading-name
			{
				width:33%;
				border-right:1px solid #ccc;
			}
			.ibx-prop-heading-value
			{
				flex:1 1 auto;
			}
			.ibx-prop-heading-splitter
			{
				min-width:1px;
				width:2px;
			}
			.ibx-prop-row
			{
				border-bottom:1px solid #eee;
			}
			.ibx-prop-name-col
			{
				border-right:1px solid #eee;
			}
			.ibx-prop-value-col
			{
				margin-left:.5em;
			}
			.ibx-prop-collapsed
			{
				height:0px;
				overflow:hidden;
				border:none;
			}
		]]>
		</style-sheet>
	</styles>

	<markup>
		<markup-file src="./test_res_markup.xml"/>
		<markup-block>
		</markup-block>
	</markup>

	<scripts>
		<script-file src="./test_res_script.js"/>
		<script-file src="../../ibxtools/shared_resources/js/ibfs.js" loadContext="ibx"/>
		<script-block>
		<![CDATA[
			var testProps = 
			[
				{
					"displayName":"Background Color",
					"displayValue":"White",
					"name":"backgroundColor",
					"value":"white",
					"type":"string",
					"uiType":"colorPicker",
					"expanded":false,
				},
				{
					"displayName":"Border",
					"displayValue":"1px solid black",
					"name":"border",
					"value":"1px solid black",
					"type":"string",
					"uiType":"borderSelector",
					"expanded":false,
					"props":
					[
						{
							"displayName":"Left",
							"displayValue":"1px solid black",
							"name":"left",
							"value":"1px solid black",
							"type":"string",
							"uiType":"borderSelector",
							"expanded":false,
							"props":
							[
								{
									"displayName":"Width",
									"displayValue":"1px",
									"name":"width",
									"value":"1px",
									"type":"string",
									"uiType":"textField",
								},
								{
									"displayName":"Style",
									"displayValue":"Solid",
									"name":"style",
									"value":"solid",
									"type":"string",
									"uiType":"select",
									"values":
									{
										"solid":
										{
											"displayName":"Solid",
											"value":"solid",
										},
										"dashed":
										{
											"displayName":"Dashed",
											"value":"dashed",
										},
										"dotted":
										{
											"displayName":"Dotted",
											"value":"dotted",
										},
									},
								},
								{
									"displayName":"Color",
									"displayValue":"red",
									"name":"color",
									"value":"red",
									"type":"color",
									"uiType":"colorPicker",
								},
							]
						}
					]
				}
			];

			$.widget("ibi.ibxDataGrid", $.ibi.ibxGrid,
			{
				options:
				{
					headingMap:[{"title":"displayName"}, {"title":"displayValue"}, {"title":"name"}, {"title":"value"}, {"title":"type"}, {"title":"uiType"}],
					columnMap:
					[
						{"attr":"displayName", "width":"1fr"},
						{"attr":"displayValue", "width":"1fr"},
						{"attr":"name", "width":"1fr"},
						{"attr":"value", "width":"1fr"},
						{"attr":"type", "width":"1fr"},
						{"attr":"uiType", "width":"1fr"}
					],
				},
				_widgetClass:"ibx-data-grid",
				_create:function()
				{
					this._super;
					var options = this.options;
					this._headingBar = $("<div class='ibx-grid-heading'>").ibxHBox();
					for(var i = 0; i < options.headingMap; ++i)
					{
						var hInfo = options.headingMap[i];
						var header = $(sformat("<div class='ibx-data-grid-col-heading'>{1}</div>", hInfo.title));
						this._headingBar.ibxWidget("add", header);
					}
				},
				_refresh()
				{
					this._super();
					var options = this.options;

					options.cols = ""
					for(var i = 0; i < options.columnMap.length; ++i)
					{
						var colInfo = options.columnMap[i];
						cols += colInfo.width + " ";
					}


					this._headingBar.data({ibxRow:1, });

				}
			});

			$.widget("ibi.ibxPropertySheet", $.ibi.ibxGrid, 
			{
				options:
				{
					singleClickExpand:false,
					indentColumn:1,
					alignContent:"start",
					justifyContent:"stretch",
					headingMap:[{"title":"Name", "pos":"33%"}, {"attr":"displayValue", "pos":"1fr"}],
					colsMap:[{"attr":"displayName", "pos":"33%"}, {"attr":"displayValue", "pos":"1fr"}],
					rows:"",
				},
				_widgetClass:"ibx-property-sheet",
				_create:function()
				{
					this._super();
					this._headingBar = $("<div class='ibx-prop-heading' data-ibx-col='1/span3' data-ibx-row='1'>").ibxHBox();
					this._headingName = $("<div class='ibx-prop-heading-label ibx-prop-heading-name'>").ibxLabel({text:"Name"}),
					this._headingSplitter = $("<div class='ibx-prop-heading-splitter'>").ibxSplitter().on("ibx_resize", this._onSplitterResize.bind(this)),
					this._headingValue = $("<div class='ibx-prop-heading-label ibx-prop-heading-value''>").ibxLabel({text:"Value"}),
					this._headingBar.append(this._headingName, this._headingSplitter, this._headingValue);
					this.element.append(this._headingBar);
				},
				_init:function()
				{
					this._super();
				},
				_destroy:function()
				{
					this._super();
				},
				colCount:function()
				{
					return this.options.cols.split(" ").length;
				},
				props:function(props)
				{
					if(props === undefined)
						return this._props;

					this._props = props;
					this.remove(".ibx-prop-name-col, .ibx-prop-value-col");

					for(var i = 0; i < props.length; ++i)
					{
						var prop = props[i];
						var pNode = $("<div tabindex='0'>").ibxPropertySheetRow({property:prop, parentNode:null});
						var cols = pNode.ibxWidget("columns");
						this.add(cols);
						pNode.ibxWidget("refresh");

						if(prop.expanded)
							pNode.ibxWidget("expanded", true);
					}

					this._onSplitterResize();
					this.refresh();
				},
				_onSplitterResize:function(e, resizeInfo)
				{
					this.refresh();
				},
				_refresh:function()
				{
					var options = this.options;
					var width = this._headingName.outerWidth();
					this.options.cols = width + "px 1fr";
					this._super();
				}
			});


			$.widget("ibi.ibxPropertySheetRow", $.ibi.ibxTreeNode, 
			{
				options:
				{
					property:{},
					columnMap:
					[
						{"attr":"displayName", "pos":1},
						{"attr":"displayValue", "pos":2},
					],
				},
				_widgetClass:"ibx-propert-sheet-tree-node",
				_createWidget:function(options, element)
				{
					this._super(options, element);
				},
				_create:function()
				{
					var options = this.options;
					this._super();

					this._columns.push(this.element.ibxAddClass("ibx-psheet-column")[0]);
					for(var i = 1; i < options.columnMap.length; ++i)
						this._columns.push($("<div>").ibxLabel().ibxAddClass("ibx-psheet-column")[0]);
				},
				_destroy:function()
				{
					this._super();
				},
				_columns:[],
				columns:function()
				{
					return this._columns;
				},
				children:function(selector)
				{
				},
				add:function(el, elSibling, before, refresh)
				{
				},
				remove:function(el, destroy, refresh)
				{
				},
				depth:function()
				{
					var depth = 0;
					var parentNode = this.element;;
					while(parentNode = parentNode.ibxWidget("parentNode"))
						depth++;
					return depth;	
				},
				tree:function()
				{
					return this.element.closest(".ibx-property-sheet");
				},
				parentNode:function()
				{
					return this.options.parentNode;
				},
				hasChildren:function()
				{
					var props = this.options.property.props;
					return props ? !!this.options.property.length : false;
				},
				_onNodeLabelEvent:function(e)
				{
					this._super(e);
				},
				_refresh:function()
				{
					var options = this.options;
					var prop = options.property;
					var colMap = options.columnMap;

					options.container = this.hasChildren();
					options.labelOptions.text = prop[colMap[0].attr];
					this._super();

					var colCount = this.tree().ibxWidget("colCount");
					var rowNum = this.element.prevAll(".ibx-psheet-column").length/colCount;
					for(var i = 1; i < options.columnMap.length; ++i)
					{
						var colInfo = options.columnMap[i];
						var col = this._columns[i];
						$(col).ibxWidget("option", "text", prop[colInfo.attr]).data({"ibxRow":rowNum, "ibxCol":colInfo.pos});
					}
				}
			});
			
			//# sourceURL=test_res_bundle.xml
		]]>
		</script-block>
	</scripts>
</ibx-res-bundle>