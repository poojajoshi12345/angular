<?xml version="1.0" encoding="UTF-8"?>
<ibx-res-bundle name="test_res_bundle.xml" loadContext="bundle">
	<strings>
		<string-file src="./test_res_strings.txt" default="false"/>
		<string-bundle>
			<![CDATA[
			{
				"language":"ibx_default",
				"strings":
				{
				}
			}
		]]>
		</string-bundle>
	</strings>

	<styles>
		<style-file src="./test_res_styles.css"/>
		<style-sheet>
		<![CDATA[
			.ibx-prop-heading
			{
				background-color:#ccc;
			}
			.ibx-prop-heading-label
			{
				padding:3px;
				border:1px outset;
			}
			.ibx-prop-row
			{
				border-bottom:1px solid #eee;
			}
			.ibx-prop-heading-name
			{
				width:33%;
				border-right:1px solid #ccc;
			}
			.ibx-prop-heading-value
			{
				flex:1 1 auto;
			}
			.ibx-prop-heading-splitter
			{
				min-width:1px;
				width:2px;
			}
			.ibx-prop-row
			{
				border-bottom:1px solid #eee;
			}
			.ibx-prop-name-col
			{
				border-right:1px solid #eee;
			}
			.ibx-prop-value-col
			{
				margin-left:.5em;
			}
			.ibx-prop-collapsed
			{
				height:0px;
				overflow:hidden;
				border:none;
			}
		]]>
		</style-sheet>
	</styles>

	<markup>
		<markup-file src="./test_res_markup.xml"/>
		<markup-block>
		</markup-block>
	</markup>

	<scripts>
		<script-file src="./test_res_script.js"/>
		<script-file src="../../ibxtools/shared_resources/js/ibfs.js" loadContext="ibx"/>
		<script-block>
		<![CDATA[
			var testProps = 
			{
				"props":
				{
					"border":
					{
						"displayName":"Border",
						"displayValue":"1px solid black",
						"value":"1px solid black",
						"type":"string",
						"uiType":"borderSelector",
						"expanded":false,
						"props":
						{
							"left":
							{
								"displayName":"Left",
								"displayValue":"1px solid black",
								"value":"1px solid black",
								"type":"string",
								"uiType":"borderSelector",
								"expanded":false,
								"props":
								{
									"width":
									{
										"displayName":"Width",
										"displayValue":"1px",
										"value":"1px",
										"type":"string",
										"uiType":"textField",
									},
									"style":
									{
										"displayName":"Style",
										"displayValue":"Solid",
										"value":"solid",
										"type":"string",
										"uiType":"select",
										"values":
										{
											"solid":
											{
												"displayName":"Solid",
												"value":"solid",
											},
											"dashed":
											{
												"displayName":"Dashed",
												"value":"dashed",
											},
											"dotted":
											{
												"displayName":"Dotted",
												"value":"dotted",
											},
										},
									},
									"color":
									{
										"displayName":"Color",
										"displayValue":"red",
										"value":"red",
										"type":"color",
										"uiType":"colorPicker",
									},
								}
							}
						}
					}
				}
			};

			$.widget("ibi.ibxPropertySheet", $.ibi.ibxGrid, 
			{
				options:
				{
					indentColumn:1,
					alignContent:"start",
					justifyContent:"stretch",
					cols:"0px 1fr",
					rows:"",
				},
				_widgetClass:"ibx-property-sheet",
				_create:function()
				{
					this._super();
					this._headingBar = $("<div class='ibx-prop-heading' data-ibx-col='1/span3' data-ibx-row='1'>").ibxHBox();
					this._headingName = $("<div class='ibx-prop-heading-label ibx-prop-heading-name'>").ibxLabel({text:"Name"}),
					this._headingSplitter = $("<div class='ibx-prop-heading-splitter'>").ibxSplitter().on("ibx_resize", this._onSplitterResize.bind(this)),
					this._headingValue = $("<div class='ibx-prop-heading-label ibx-prop-heading-value''>").ibxLabel({text:"Value"}),
					this._headingBar.append(this._headingName, this._headingSplitter, this._headingValue);
					this.element.append(this._headingBar);
				},
				_init:function()
				{
					this._super();
				},
				_destroy:function()
				{
					this._super();
				},
				props:function(props)
				{
					this._props = props;
					this.remove(".ibx-prop-name-col, .ibx-prop-value-col");
					this._buildTree(props, 1);
					this._onSplitterResize();
					this.refresh();
				},
				_buildTree:function(propParent, rowCount)
				{
					for(let key in propParent.props)
					{
						rowCount++;
						var prop = propParent.props[key];
						var pName = $("<div tabindex='0' class='ibx-prop-row ibx-prop-name-col'>").ibxTreeNode({container:!!prop.props, labelOptions:{text:prop.displayName}}).data({ibxCol:1, ibxRow:rowCount});
						pName.on("ibx_expand ibx_collapse", this._onPropExpandEvent.bind(this));
						var pValue = $("<div tabindex='0' class='ibx-prop-row ibx-prop-value-col'>").ibxLabel({text:prop.displayValue}).data({ibxCol:2, ibxRow:rowCount});
						this.element.append(pName, pValue);
						
						prop.propParent = propParent;
						prop._internal = {"propParent":propParent, "pName":pName, "pValue":pValue};
						pName.data("ibxPropInfo", prop);
						if(prop.props)
						{
							this._buildTree(prop, rowCount)
							if(!prop.expanded)
								for(let key in prop.props)
								{
									let propChild = prop.props[key];
									propChild._internal.pName.ibxAddClass("ibx-prop-collapsed");
									propChild._internal.pValue.ibxAddClass("ibx-prop-collapsed");
								}
						}
					}
				},
				_onSplitterResize:function(e, resizeInfo)
				{
					this.refresh();
				},
				_onPropExpandEvent:function(e)
				{
					var expanded = (e.type == "ibx_collapse");
					var prop = $(e.target).data("ibxPropInfo");
					for(let key in prop.props)
					{
						let propChild = prop.props[key];
						propChild._internal.pName.ibxToggleClass("ibx-prop-collapsed");
						propChild._internal.pValue.ibxToggleClass("ibx-prop-collapsed");
					};
				},
				_refresh:function()
				{
					var options = this.options;
					var width = this._headingName.outerWidth();
					this.options.cols = width + "px 1fr";
					this._super();

					var indent = (options.indent) ? options.indent : $.ibi.ibxTreeNode.defaultIndent;
					this.element.find(".ibx-prop-name-col").each(function(idx, el)
					{
						el = $(el);
						var propInfo = el.data("ibxPropInfo");
						var depth = 0;
						while(propInfo = propInfo._internal ? propInfo._internal.propParent : null)
							depth++;
						el.css("paddingLeft", depth * indent);
					}.bind(this));
				}
			});
			//# sourceURL=test_res_bundle.xml
		]]>
		</script-block>
	</scripts>
</ibx-res-bundle>