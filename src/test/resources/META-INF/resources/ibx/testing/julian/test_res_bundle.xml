<?xml version="1.0" encoding="UTF-8"?>
<ibx-res-bundle name="test_res_bundle.xml" loadContext="bundle">
	<strings>
		<string-file src="./test_res_strings.txt" default="false"/>
		<string-bundle>
			<![CDATA[
			{
				"language":"ibx_default",
				"strings":
				{
				}
			}
		]]>
		</string-bundle>
	</strings>

	<styles>
		<style-file src="./test_res_styles.css"/>
		<style-sheet>
		<![CDATA[
			.ibx-prop-heading
			{
				background-color:#ccc;
			}
			.ibx-prop-heading-label
			{
				padding:3px;
				border:1px outset;
			}
			.ibx-prop-heading-name
			{
				width:25%;
				border-right:1px solid #ccc;
			}
			.ibx-prop-heading-value
			{
				flex:1 1 auto;
			}
			.ibx-prop-heading-splitter
			{
				min-width:1px;
				width:2px;
			}
			.ibx-prop-collapsed
			{
				height:0px;
			}
		]]>
		</style-sheet>
	</styles>

	<markup>
		<markup-file src="./test_res_markup.xml"/>
		<markup-block>
		</markup-block>
	</markup>

	<scripts>
		<script-file src="./test_res_script.js"/>
		<script-file src="../../ibxtools/shared_resources/js/ibfs.js" loadContext="ibx"/>
		<script-block>
		<![CDATA[
			var testProps = 
			{
				"border":
				{
					"displayName":"Border",
					"displayValue":"1px solid black",
					"value":"1px solid black",
					"type":"string",
					"uiType":"borderSelector",
					"expanded":false,
					"props":
					{
						"left":
						{
							"displayName":"Left",
							"displayValue":"1px solid black",
							"value":"1px solid black",
							"type":"string",
							"uiType":"borderSelector",
							"expanded":false,
							"props":
							{
								"width":
								{
									"displayName":"Width",
									"displayValue":"1px",
									"value":"1px",
									"type":"string",
									"uiType":"textField",
								},
								"style":
								{
									"displayName":"Style",
									"displayValue":"Solid",
									"value":"solid",
									"type":"string",
									"uiType":"select",
									"values":
									{
										"solid":
										{
											"displayName":"Solid",
											"value":"solid",
										},
										"dashed":
										{
											"displayName":"Dashed",
											"value":"dashed",
										},
										"dotted":
										{
											"displayName":"Dotted",
											"value":"dotted",
										},
									},
								},
								"color":
								{
									"displayName":"Color",
									"displayValue":"red",
									"value":"red",
									"type":"color",
									"uiType":"colorPicker",
								},
							}
						}
					}
				}
			};

			$.widget("ibi.ibxPropertySheet", $.ibi.ibxGrid, 
			{
				options:
				{
					indentColumn:1,
					alignContent:"start",
					justifyContent:"stretch",
					cols:"25% 1fr",
					rows:"",
				},
				_widgetClass:"ibx-property-sheet",
				_create:function()
				{
					this._super();
					this._headingBar = $("<div class='ibx-prop-heading' data-ibx-col='1/span3' data-ibx-row='1'>").ibxHBox();
					this._headingName = $("<div class='ibx-prop-heading-label ibx-prop-heading-name'>").ibxLabel({text:"Name"}),
					this._headingSplitter = $("<div class='ibx-prop-heading-splitter'>").ibxSplitter().on("ibx_resize", this._onSplitterResize.bind(this)),
					this._headingValue = $("<div class='ibx-prop-heading-label ibx-prop-heading-value''>").ibxLabel({text:"Value"}),
					this._headingBar.append(this._headingName, this._headingSplitter, this._headingValue);
					this.element.append(this._headingBar);
				},
				_init:function()
				{
					this._super();
				},
				_destroy:function()
				{
					this._super();
				},
				props:function(props)
				{
					this._props = props;
					this.remove(".ibx-prop-name, .ibx-prop-value");
					this._buildTree(props, 1);
					this._onSplitterResize();
					this.refresh();
				},
				_buildTree:function(props, rowCount)
				{
					var arProps = [];
					for(var key in props)
					{
						rowCount++;
						var prop = props[key];
						var pName = $("<div tabindex='0' class='ibx-prop-name'>").ibxTreeNode({container:!!prop.props, labelOptions:{text:prop.displayName}}).data({ibxCol:1, ibxRow:rowCount});
						pName.on("ibx_expand ibx_collapse", this._onPropExpandEvent.bind(this));
						var pValue = $("<div tabindex='0' class='ibx-prop-value'>").ibxLabel({text:prop.displayValue}).data({ibxCol:2, ibxRow:rowCount});
						this.element.append(pName, pValue);
						var propObject = {"prop":prop, "pName":pName, "pValue":pValue, "children":null};
						pName.data("ibxProp", propObject);
						if(prop.props)
						{
							propObject.children = this._buildTree(prop.props, rowCount)
							if(!prop.expanded)
								$(propObject.children).each(function(idx, pObject)
								{
									pObject.pName.ibxAddClass("ibx-prop-collapsed");
									pObject.pValue.ibxAddClass("ibx-prop-collapsed");
								});
						}
						arProps.push(propObject);
					}
					return arProps;
				},
				_onSplitterResize:function(e, resizeInfo)
				{
					this.refresh();
				},
				_onPropExpandEvent:function(e)
				{
					var expanded = (e.type == "ibx_collapse");
					var propInfo = $(e.target).data("ibxProp");
					$(propInfo.children).each(function(idx, pObject)
					{
						pObject.pName.ibxToggleClass("ibx-prop-collapsed", expanded);
						pObject.pValue.ibxToggleClass("ibx-prop-collapsed", expanded);
					});
				},
				_refresh:function()
				{
					var options = this.options;
					var width = this._headingName.outerWidth();
					this.options.cols = width + "px 1fr";
					this._super();
				}
			});
			//# sourceURL=test_res_bundle.xml
		]]>
		</script-block>
	</scripts>
</ibx-res-bundle>