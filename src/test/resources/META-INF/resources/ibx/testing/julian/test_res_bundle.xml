<?xml version="1.0" encoding="UTF-8"?>
<ibx-res-bundle name="test_res_bundle.xml" loadContext="bundle">
	<strings>
		<string-file src="./test_res_strings.txt" default="false"/>
		<string-bundle>
			<![CDATA[
			{
				"language":"ibx_default",
				"strings":
				{
				}
			}
		]]>
		</string-bundle>
	</strings>

	<styles>
		<style-file src="./test_res_styles.css"/>
		<style-sheet>
		<![CDATA[
			.ibx-data-grid
			{
				box-sizing:border-box;
			}
			.dgrid-corner
			{
				border-right:1px solid #ccc;
				border-bottom:1px solid #ccc;
				background-color:#eee;
			}
			.dgrid-header-col-bar, .dgrid-header-row-bar
			{
				background-color:#eee;
				overflow:hidden;
			}
			.dgrid-header-col-bar
			{
				border-bottom:1px solid #888;
			}
			.dgrid-header-row-bar
			{
				border-right:1px solid #888;
			}
			.ibx-data-grid > .dgrid-header-bar-hidden
			{
				display:none;
			}
			.ibx-data-grid .dgrid-col-hidden, .ibx-data-grid .dgrid-row-hidden
			{
				display:none;
			}
			.dgrid-header-col
			{
				flex:0 0 auto;
				padding:.5em;
			}
			.dgrid-header-row
			{
				font-size:.9em;
				flex:0 0 auto;
				min-width:3em;
				border-bottom:1px solid #ccc;
				box-sizing:border-box;
			}
			.dgrid-header-col-splitter
			{
				min-width:0px;
				width:5px;
				background-color:transparent;
				border-right:1px solid #ccc;
			}
			.dgrid-grid
			{
				xborder-top:1px solid black;
				xborder-left:1px solid black;
				overflow:auto;
			}
			.dgrid-row
			{
				flex:0 0 auto;
			}
			.dgrid-cell
			{
				height:1em;
				flex:0 0 auto;
				padding:.5em;
				border-right:1px solid #ccc;
				border-bottom:1px solid #ccc;
			}
			.dgrid-cell-auto-padding
			{
			}
			.dgrid-cell.ibx-sm-selected
			{
				background-color:#666;
				color:white;
			}
		]]>
		</style-sheet>
	</styles>

	<markup>
		<markup-file src="./test_res_markup.xml"/>
		<markup-block>
		</markup-block>
	</markup>

	<scripts>
		<script-file src="./test_res_script.js"/>
		<script-file src="../../ibxtools/shared_resources/js/ibfs.js" loadContext="ibx"/>
		<script-block>
		<![CDATA[
			var testProps = 
			[
				{
					"displayName":"Background Color",
					"displayValue":"White",
					"name":"backgroundColor",
					"value":"white",
					"type":"string",
					"uiType":"colorPicker",
					"expanded":false,
				},
				{
					"displayName":"Border",
					"displayValue":"1px solid black",
					"name":"border",
					"value":"1px solid black",
					"type":"string",
					"uiType":"borderSelector",
					"expanded":false,
					"props":
					[
						{
							"displayName":"Left",
							"displayValue":"1px solid black",
							"name":"left",
							"value":"1px solid black",
							"type":"string",
							"uiType":"borderSelector",
							"expanded":false,
							"props":
							[
								{
									"displayName":"Width",
									"displayValue":"1px",
									"name":"width",
									"value":"1px",
									"type":"string",
									"uiType":"textField",
								},
								{
									"displayName":"Style",
									"displayValue":"Solid",
									"name":"style",
									"value":"solid",
									"type":"string",
									"uiType":"select",
									"values":
									{
										"solid":
										{
											"displayName":"Solid",
											"value":"solid",
										},
										"dashed":
										{
											"displayName":"Dashed",
											"value":"dashed",
										},
										"dotted":
										{
											"displayName":"Dotted",
											"value":"dotted",
										},
									},
								},
								{
									"displayName":"Color",
									"displayValue":"red",
									"name":"color",
									"value":"red",
									"type":"color",
									"uiType":"colorPicker",
								},
							]
						}
					]
				}
			];

			$.widget("ibi.ibxDataGridSelectionManager", $.ibi.ibxSelectionManager,
			{
				"options":
				{
					"grid":null,
					"type":"multi",
					"focusDefault":true,
					"focusResetOnBlur":false,
					"navKeyRoot":true,
					"toggleSelection":true,
					"escClearSelection":true,
					"selectableChildren":"dgrid-selectable", //can be elements/classes/etc.
				},
				_widgetClass:"ibx-data-grid-selection-model",
				_onKeyDown:function(e)
				{
					var options = this.options;
					var cell = this.focus();
					if(cell && options.navKeyRoot && [$.ui.keyCode.LEFT, $.ui.keyCode.RIGHT, $.ui.keyCode.UP, $.ui.keyCode.DOWN].indexOf(e.keyCode) != -1)
					{
						var row = cell.parent();
						var idxRow = row.parent().children().index(row[0]);
						var idxCol = row.children().index(cell[0]);
						if(e.keyCode == $.ui.keyCode.LEFT)
							cell = options.grid.getCell(idxRow, idxCol-1);
						else
						if(e.keyCode == $.ui.keyCode.RIGHT)
							cell = options.grid.getCell(idxRow, idxCol+1);
						else
						if(e.keyCode == $.ui.keyCode.UP)
							cell = options.grid.getCell(idxRow-1, idxCol);
						else
						if(e.keyCode == $.ui.keyCode.DOWN)
							cell = options.grid.getCell(idxRow+1, idxCol);

						cell ? this.focus(cell, true) : this._super(e);
						e.preventDefault();
					}
					else
						this._super(e);
				},
				foo:function(asdf)
				{
					debugger;
					return "Julian";
				}
			});

			$.widget("ibi.ibxDataGrid", $.ibi.ibxGrid,
			{
				options:
				{
					colMap:[],
					rowMap:[],//not currently used.
					defaultColConfig: {title:"Column", size:"100px", flex:false, justify:"center", resizable:false, selectable:true, visible:true},
					showColumnHeaders:true,
					showRowHeaders:false,
					
					/*frame stuff*/
					cols:"auto 1fr",
					rows:"auto 1fr",
					classes:
					{
						colHeaderBarClass:"dgrid-header-col-bar",
						colHeaderClass:"dgrid-header-col",
						colHeaderSplitterClass:"dgrid-header-col-splitter",
						rowHeaderBarClass:"dgrid-header-row-bar",
						rowHeaderClass:"dgrid-header-row",
						rowHeaderSplitterClass:"dgrid-header-row-splitter",
						gridClass:"dgrid-grid",
						gridRow:"dgrid-row",
						gridCell:"dgrid-cell",
					},
					gridOptions:
					{
						align:"stretch",
						justify:"start",
					},

					/*accessibility stuff*/
					aria:
					{
						role:"grid"
					}
				},
				_widgetClass:"ibx-data-grid",
				_create:function()
				{
					var options = this.options;
					var classes = options.classes;
					var corner = this._corner = $("<div>").ibxAddClass("dgrid-corner").data({ibxCol:1, ibxRow:1});
					var colHeaderBar = this._colHeaderBar = $("<div tabindex='0'>").ibxHBox().ibxAddClass(classes.colHeaderBarClass).data({ibxCol:"2", ibxRow:"1"});
					var rowHeaderBar = this._rowHeaderBar = $("<div tabindex='0'>").ibxVBox({align:"stretch"}).ibxAddClass(classes.rowHeaderBarClass).data({ibxCol:"1", ibxRow:"2"});
					var grid = this._grid = $("<div tabindex='0'>").ibxVBox({align:"stretch"}).ibxAddClass(classes.gridClass).data({ibxCol:"2", ibxRow:"2"});
					grid.on("scroll", this._onGridScroll.bind(this)).ibxDataGridSelectionManager({grid:this});

					colHeaderBar.ibxWidget({navKeyRoot:true});
					rowHeaderBar.ibxWidget({navKeyRoot:true});

					this.add([corner[0], colHeaderBar[0], rowHeaderBar[0], grid[0]]);
					this._super();
				},
				_setAccessibility:function(accessible, aria)
				{
					var options = this.options;
					return aria;
				},
				_buildHeaders:function(which)
				{
					which == which || "both";

					var options = this.options;
					var classes = options.classes;

					if(which == "column" || which == "both")
					{
						this._colHeaderBar.ibxWidget("remove");

						var colMap = options.colMap;
						for(var i = 0; i < colMap.length; ++i)
						{
							var cInfo = colMap[i] = $.extend({}, options.defaultColConfig, colMap[i]);
							var size = sformat("width:{1};flex:{2} 0 auto;", cInfo.size, cInfo.flex ? 1 : 0);

							//make header
							var cHeading = $(sformat("<div tabindex='-1' class='{1}' style='{2};'>{3}</div>", classes.colHeaderClass, size, cInfo.title))
							cHeading.ibxButtonSimple({justify:cInfo.justify || "start"});
							cHeading.attr("role", "columnheader");

							//make splitter
							var splitter = $(sformat("<div class='{1}'>", classes.colHeaderSplitterClass));
							splitter.ibxSplitter({locked:!cInfo.resizable || (i == colMap.length-1), resize:"first"}).on("ibx_resize ibx_reset", this._onSplitterResize.bind(this));

							//save UI, and add header to bar
							cInfo._ui = {"header":cHeading, "splitter":splitter};
							this._colHeaderBar.ibxWidget("add", [cHeading[0], splitter[0]]);
						}

						var padding = $("<div style='flex:0 0 auto;'>").css({"width":"20px", height:"1px"});
						this._colHeaderBar.append(padding);
					}

					if(which == "row" || which == "both")
					{
						this._rowHeaderBar.ibxWidget("remove");

						var nRows = this.getRowCount();
						for(var i = 0; i < nRows; ++i)
						{
							//make header
							var row = $(this.getRow(i));
							var size = sformat("height:{1}px;", row.outerHeight());
							var rHeading = $(sformat("<div tabindex='-1' class='{1}' style='{2};'>{3}</div>", options.classes.rowHeaderClass, size, i+1))
							rHeading.ibxButtonSimple({justify:"center"});
							rHeading.attr("role", "rowheader");
							this._rowHeaderBar.append(rHeading);
						}
						var padding = $("<div style='flex:0 0 auto;'>").css({"width":"1px", height:"20px"});
						this._rowHeaderBar.append(padding);
					}
				},
				getHeaders:function(row)
				{
					var headerBar = row ? this._rowHeaderBar : this._colHeaderBar;
					return headerBar.children("."+this.options.classes.colHeaderClass).toArray();
				},
				getCell:function(idxRow, idxCol)
				{
					var ret = null;
					var row = this.getRow(idxRow);
					var filter = (parseInt(idxRow, 10) !== NaN) ? sformat(".{1}:nth-child({2})", this.options.classes.gridCell, idxCol+1) : idxCol;
					return $(row).children(filter)[0] || null;
				},
				getColumnCount:function()
				{
					return this.options.colMap.length;
				},
				getColumn:function(idxCol)
				{
					var classes = this.options.classes;
					var filter = sformat(".{1} > .{2}:nth-child({3})", classes.gridRow, classes.gridCell, idxCol + 1);
					return this._grid.find(filter).toArray() || null;
				},
				showColumn:function(idxCol, show)
				{
					var cells = $(this.getColumn(idxCol));
					var cInfo = this.options.colMap[idxCol];
					if(cInfo && cInfo._ui)
						cells = cells.add(cInfo._ui.header).add(cInfo._ui.splitter);
					cells.ibxToggleClass("dgrid-col-hidden", !show);
				},
				selectColumn:function(idxCol, select, addSelection)
				{
					var cells = this.getColumn(idxCol);
					if(!addSelection)
						this._grid.ibxDataGridSelectionManager("deselectAll", true);
					this._grid.ibxDataGridSelectionManager("selected", cells, select);
				},
				getRowCount:function()
				{
					return this._grid.find("." + this.options.classes.gridRow).length;
				},
				getRow:function(idxRow)
				{
					var filter = sformat(".{1}:nth-child({2})", this.options.classes.gridRow, idxRow+1);
					return this._grid.children(filter).children(sformat(".{1}", this.options.classes.gridCell)).toArray() || null;
				},
				showRow:function(idxRow, show)
				{
					var cells = $(this.getRow(idxRow));
					var cInfo = this.options.rowMap[idxRow];
					if(cInfo && cInfo._ui)
						cells = cells.add(cInfo._ui.header).add(cInfo._ui.splitter);
					cells.ibxToggleClass("dgrid-row-hidden", !show);
				},
				selectRow:function(idxRow, select, addSelection)
				{
					var cells = this.getRow(idxRow);
					if(!addSelection)
						this._grid.ibxDataGridSelectionManager("deselectAll", true);
					this._grid.ibxDataGridSelectionManager("selected", cells, select);
				},
				addRow:function(cells, sibling, before, refresh)
				{
					var options = this.options;
					var selOptions = this._grid.ibxDataGridSelectionManager("option");
					var row = $("<div>").ibxHBox().ibxAddClass(options.classes.gridRow);

					//create extra columns less than cells.
					while(cells.length > options.colMap.length)
						options.colMap.push($.extend({}, options.defaultColConfig));

					//create extra cells less than columns.
					while(cells.length < options.colMap.length)
						cells.push($("<div>")[0]);

					//make sure the cells and row have proper aria stuff, classes, etc.
					$(cells).attr({"role":"gridcell", "tabindex":"-1"}).ibxAddClass(options.classes.gridCell).data("ibxGridRow", row[0]).each(function(idx, el)
					{
						var cInfo = options.colMap[idx];
						$(el).ibxToggleClass(selOptions.selectableChildren, cInfo.selectable);
					}.bind(this));

					row.attr("role", "row").append(cells);
					this._grid.append(row);

					//refresh will rebuild the headers.
					if(refresh)
						this.refresh();
					return row[0];
				},
				addRows:function(rows, sibling, before, refresh)
				{
					var ret = [];
					for(var i = 0; i < rows.length; ++i)
						ret.push(this.addRow(rows[i], sibling, before, refresh));
					return ret;
				},
				removeRow:function(row, destroy, refresh)
				{
					this._grid.ibxWidget("remove", row, destroy, refresh);
				},
				removeAll:function()
				{
					this._grid.ibxWidget("remove");
				},
				_onSplitterResize:function(e, resizeInfo)
				{
					var splitter = $(e.target);
					var sWidth = splitter.outerWidth();
					var e1lWidth = resizeInfo.el1.outerWidth();
					var colMap = this.options.colMap;

					var idxEl = splitter.siblings(".dgrid-header-col").index(resizeInfo.el1);
					var cells = this._grid.find(sformat(".dgrid-row > .{1}:nth-child({2})", this.options.classes.gridCell, idxEl+1));
					cells.outerWidth(e1lWidth + sWidth);
				},
				_onGridScroll:function(e)
				{
					var scrollX = this._grid.prop("scrollLeft");
					var scrollY = this._grid.prop("scrollTop");
					this._colHeaderBar.prop("scrollLeft", scrollX);
					this._rowHeaderBar.prop("scrollTop", scrollY);
				},
				_setOption:function(key, value)
				{
					var options = this.options;
					if(key == "colMap")
					{
						//make sure passed configs have all missing values with defaults.
						 $.each(value, function(idx, colConfig)
						 {
						 	var config = $.extend({}, options.defaultColConfig, colConfig);
						 	$.extend(colConfig, config);
						 }.bind(this));
					}
					if(key == "defaultColConfig")
						value = $.extend({}, options.defaultColConfig, value);
					this._super(key, value);
				},
				_refresh:function()
				{
					var options = this.options;
					this._colHeaderBar.ibxToggleClass("dgrid-header-bar-hidden", !options.showColumnHeaders);
					this._rowHeaderBar.ibxToggleClass("dgrid-header-bar-hidden", !options.showRowHeaders);
					this._super();

					//update the header bars regardless of visibility, as they control the grid cell sizes.
					if(options.showColumnHeaders)
						this._buildHeaders("column");
					if(options.showRowHeaders)
						this._buildHeaders("row");

					//update column widths
					if(options.colMap.length)
					{
						var splitterSize = $(this._colHeaderBar[0].querySelector(".dgrid-header-col-splitter")).outerWidth();
						var colMap = options.colMap;
						for(var i = 0; i < colMap.length; ++i)
						{
							cInfo = colMap[i];
							var cells = $(this.getColumn(i));

							cellSize = cInfo.size;
							if(cInfo._ui)
								cellSize = cInfo._ui.header.outerWidth() + cInfo._ui.splitter.outerWidth();
							cInfo.flex ? cells.css({flex:"1 0 auto", width:cellSize}) : cells.outerWidth(cellSize);
						}
					}

					//this is like a refresh for the selection model..will adjust the classes of the selectable children correctly.
					this._grid.ibxDataGridSelectionManager("selectableChildren");
				}
			});

					
			//# sourceURL=test_res_bundle.xml
		]]>
		</script-block>
	</scripts>
</ibx-res-bundle>